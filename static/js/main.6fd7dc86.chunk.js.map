{"version":3,"sources":["serviceWorker.js","connect.js","ToDoComponent.js","ToDo.js","actions.js","constants.js","createStore.js","reducer.js","Provider.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","mapStateToProps","mapDispatchToProps","Component","_React$Component","_class2","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleChange","forceUpdate","inherits","createClass","key","value","store","react_default","a","createElement","assign","props","getState","dispatch","subscribe","React","ToDoComponent","updateText","e","todoText","target","setState","addTodo","state","_this$props","title","todos","placeholder","onChange","onClick","map","todo","idx","ToDo","text","type","payload","createStore","reducer","initialState","currentState","listeners","action","forEach","listener","push","undefined","toConsumableArray","Provider","children","ReactDOM","render","Provider_Provider","src_ToDo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fd7dc86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst connect = (mapStateToProps, mapDispatchToProps) =>\r\n    Component => {\r\n        return class extends React.Component {\r\n            render() {\r\n                const {store} = window;\r\n                return (\r\n                    <Component\r\n                        {...this.props}\r\n                        {...mapStateToProps(store.getState(), this.props)}\r\n                        {...mapDispatchToProps(store.dispatch, this.props)}\r\n                    />\r\n                )\r\n            }\r\n\r\n            componentDidMount() {\r\n                window.store.subscribe(this.handleChange)\r\n            }\r\n\r\n            handleChange = () => {\r\n                this.forceUpdate()\r\n            }\r\n        }\r\n    }\r\n\r\nexport default connect;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n  class ToDoComponent extends React.Component {\r\n      constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n            todoText: ''\r\n          }\r\n      }\r\n    render() {\r\n        const {\r\n            title,\r\n            todos,\r\n        } = this.props;\r\n        const {todoText} = this.state;\r\n      return (\r\n        <div>\r\n          <label>{title || 'Без названия'}</label>\r\n          <div>\r\n            <input\r\n              value={todoText}\r\n              placeholder=\"Название задачи\"\r\n              onChange={this.updateText}\r\n            />\r\n            <button onClick={this.addTodo}>Добавить</button>\r\n            <ul>\r\n              {\r\n                  todos.map((todo, idx) =>\r\n                    <li key={`key_${idx}`}>{todo}</li>\r\n                    )\r\n              }\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    updateText = (e) => {\r\n      const {value: todoText} = e.target;\r\n      this.setState({todoText});\r\n    }\r\n\r\n    addTodo = () => {\r\n      this.props.addTodo(this.state.todoText);\r\n      this.setState({todoText: ''});\r\n    }\r\n  }\r\n\r\nToDoComponent.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    todos: PropTypes.array.isRequired,\r\n    addTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ToDoComponent;\r\n","import connect from './connect';\r\nimport ToDoComponent from './ToDoComponent';\r\nimport {addTodo} from './actions';\r\n\r\nconst ToDo = connect(todos => ({\r\n    todos,\r\n}), dispatch => ({\r\n    addTodo: text => dispatch(addTodo(text)),\r\n}))(ToDoComponent)\r\n\r\nexport default ToDo;\r\n","import {\r\n    ADD_TODO\r\n} from './constants';\r\n\r\nconst addTodo = todo => ({\r\n    type: ADD_TODO,\r\n    payload: todo,\r\n})\r\n\r\nexport {\r\n    addTodo,\r\n}\r\n","const ADD_TODO = 'ADD_TODO';\r\n\r\nexport {\r\n    ADD_TODO\r\n}\r\n","const createStore = (reducer, initialState) => {\r\n    let currentState = initialState\r\n    const listeners = []\r\n    const getState = () => currentState\r\n    const dispatch = action => {\r\n      currentState = reducer(currentState, action)\r\n      listeners.forEach(listener => listener())\r\n    }\r\n    const subscribe = listener => listeners.push(listener)\r\n    return {\r\n        getState,\r\n        dispatch,\r\n        subscribe\r\n    }\r\n}\r\n\r\nexport default createStore;\r\n","import {ADD_TODO} from './constants';\r\n\r\nconst reducer = (state = [], action) => {\r\n    switch(action.type) {\r\n      case ADD_TODO:\r\n        return [...state, action.payload];\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\n\r\nexport default class Provider extends React.Component {\r\n    componentWillMount() {\r\n      window.store = this.props.store\r\n    }\r\n\r\n    render() {\r\n      return this.props.children\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ToDo from './ToDo';\nimport createStore from './createStore';\nimport reducer from './reducer';\nimport Provider from './Provider';\n\nReactDOM.render(\n    <Provider store={createStore(reducer, [])}>\n        <ToDo title='Список задач'/>\n    </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}